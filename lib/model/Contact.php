<?php


/**
 * Skeleton subclass for representing a row from the 'contact' table.
 *
 * 
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class Contact extends BaseContact {

  public function getFullName()
  {
    return $this->getFirstName()." ".$this->getName();
  }

  /**
   * fill data from a vcard information
   * 
   * @param $vcard  array from Contact_Vcard_Parse (PEAR)
   * @return Contact objet for chaining
   **/
  public function fromVcard($vcard)
  {
    $this->setName($vcard['N'][0]['value'][0][0]);
    $this->setFirstName($vcard['N'][0]['value'][1][0]);
    $this->setFunctionName($vcard['N'][0]['value'][3][0]);
    
    // Email: get the first
    if(count($vcard['EMAIL']))
    {
      $this->setEmail($vcard['EMAIL'][0]['value'][0][0]);
    }
    
    // Phones
    $tel = '';
    $mobile = '';
    $fax = '';
    if(isset($vcard['TEL']))
    {
      for($i=0, $n=count($vcard['TEL']); $i < $n; $i++) {
        $type = $vcard['TEL'][$i]['param']['TYPE'];

        if(!$fax && in_array('FAX', $type))
        {
          $fax = $vcard['TEL'][$i]['value'][0][0];
        }
        elseif(!$mobile && in_array('CELL', $type))
        {
          $mobile = $vcard['TEL'][$i]['value'][0][0];
        }
        elseif(!$tel)
        {
          // simple strategy: get the first phone number that's is not a FAX or a Mobile
          $tel = $vcard['TEL'][$i]['value'][0][0];
        }

        // all phones number found: stop searching
        break;
      }
    }
    
    $this->setTel($tel);
    $this->setMobile($mobile);
    $this->setFax($fax);
    
    // Address
    // TODO: get the address (from standard V3.0 and App)
    if(array_key_exists('ADR', $vcard))
    {
      $values = $vcard['ADR'][0]['value'];
      $this->setAddress($values[2][0]);
      $this->setZipcode($values[5][0]);
      $this->setCity($values[3][0]);
      $this->setCountry($values[6][0]);
    }
    else
    {
      // try to find the address in extra field generated by AAB (ITEMX.ADR)
      $adr_found = false;
      $i = 1;
      while(!$adr_found && $i < 5)
      {
        $key = 'ITEM'.$i.'.ADR';
        if(array_key_exists($key, $vcard))
        {
          $values = explode(';', $vcard[$key][0]['value'][0][0]);
          $this->setAddress($values[2]);
          $this->setZipcode($values[5]);
          $this->setCity($values[3]);
          $this->setCountry($values[6]);

          $adr_found = true;
        }
        $i = $i+1;
      }
    }
    
    // Contact MSN ?
    if(array_key_exists('X-MSN', $vcard)) {
      $this->setIm( $vcard['X-MSN'][0]['value'][0][0] );
    }
    
    return $this;
  }
  
} // Contact
